[ PRESENTERS AND VIEWMODELS ARE SPECIFIC FOR EACH UI APPLICATION ] 
    I might want a field to show red in one application but not in another

ViewModels is the implementation of th Humble Objects design pattern

ViewModels are like DTO with steroids
    Usually to exchange data between the controller and the view
    The view will have nothing else to do other than only read the ViewModel and assembly the html

ViewModels have all the properties that a DTO has, plus fields ( usually booleands and strings )
that represents how the page/screen should look like in terms of APPLICATION BUSINESS RULES, ex:

A field called Balance, would have a string with the balance formated $-19,00
Plus a boolean IsNegative = true that the View( HTML for example ) would look at 
to decide if it should be shown as red or not

STEPS: 
Controller receives a request ( command or query )
Controller assembles a InputModel ( DTO - Dependency from Application Layer )
Controller Invokes apropriated Application interactors 
Controller receives an OutputModel back from application ( DTO - Dependency from Application Layer )
    This OutputModel would contain primitives and ValueObjects ( Date, Currency, temperature etc)
Controller invokes Presenters and passed a BalanceOutPutModel
    Presenter returns a BalanceViewModel with how the data should look like at the screen
        Strings, booleans, enums with the Appropriated currency symbol, TimeZone, Metrics ( kg, km, temperature etc )
Controller finally generate a view ( screen/html page etc ) by only reading the ViewModel
        No Logic should be done AT ALL by the View or the controller 

[ Database Gateway implementation ]

** Differently from the UI/API/Console app where the UI consumes the Application layer **
** In this case the the application layer consumes the Infrastructure the equivalent **
** to the Presenter will leave on the Application layer **

STEPS:
Application layer wants to upsert something
Application layer convert the BusinessEntity/Model?? into a DTO ( Need to name this Converter )
    It can have ValueObjects if the DB library supports parsing from ValueObjects to primitives
Application layer calls the Repository.Upsert(DTO)
    Repository does it jobs and possibly return the new updated DTO
Application layer receives the DTO back from Repository and converts it back to BusinessEntity